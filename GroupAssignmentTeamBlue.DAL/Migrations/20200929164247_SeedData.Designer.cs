// <auto-generated />
using System;
using GroupAssignmentTeamBlue.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GroupAssignmentTeamBlue.DAL.Migrations
{
    [DbContext(typeof(AdvertContext))]
    [Migration("20200929164247_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("RealEstateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("RealEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Aspernatur non placeat consequatur quo qui ad quia recusandae eos.",
                            RealEstateId = 17,
                            TimeOfCreation = new DateTime(2020, 9, 29, 5, 40, 51, 296, DateTimeKind.Local).AddTicks(4326),
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Content = "Et veritatis tenetur esse vel.",
                            RealEstateId = 19,
                            TimeOfCreation = new DateTime(2020, 9, 29, 17, 46, 45, 39, DateTimeKind.Local).AddTicks(8690),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Content = "Ut commodi voluptate.",
                            RealEstateId = 10,
                            TimeOfCreation = new DateTime(2020, 9, 28, 22, 2, 31, 110, DateTimeKind.Local).AddTicks(6316),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Voluptas voluptates omnis inventore nostrum facilis eveniet et.",
                            RealEstateId = 11,
                            TimeOfCreation = new DateTime(2020, 9, 28, 23, 49, 10, 280, DateTimeKind.Local).AddTicks(2358),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Quae corrupti distinctio.",
                            RealEstateId = 16,
                            TimeOfCreation = new DateTime(2020, 9, 29, 11, 41, 21, 828, DateTimeKind.Local).AddTicks(6096),
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            Content = "Optio similique in qui dicta quasi.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 28, 23, 31, 37, 702, DateTimeKind.Local).AddTicks(3820),
                            UserId = 4
                        },
                        new
                        {
                            Id = 7,
                            Content = "Et nulla corrupti.",
                            RealEstateId = 18,
                            TimeOfCreation = new DateTime(2020, 9, 29, 7, 49, 45, 646, DateTimeKind.Local).AddTicks(7862),
                            UserId = 3
                        },
                        new
                        {
                            Id = 8,
                            Content = "Atque natus asperiores.",
                            RealEstateId = 20,
                            TimeOfCreation = new DateTime(2020, 9, 29, 13, 36, 54, 265, DateTimeKind.Local).AddTicks(4280),
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Occaecati occaecati voluptas nesciunt officia in quisquam est.",
                            RealEstateId = 20,
                            TimeOfCreation = new DateTime(2020, 9, 29, 14, 48, 2, 208, DateTimeKind.Local).AddTicks(1670),
                            UserId = 3
                        },
                        new
                        {
                            Id = 10,
                            Content = "Dignissimos dolor totam doloribus.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 29, 9, 40, 59, 921, DateTimeKind.Local).AddTicks(839),
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            Content = "Voluptatem ducimus qui accusantium fugiat adipisci.",
                            RealEstateId = 8,
                            TimeOfCreation = new DateTime(2020, 9, 29, 14, 6, 22, 578, DateTimeKind.Local).AddTicks(8467),
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            Content = "Odio sed quae quod non error tempora id et itaque.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 29, 14, 57, 58, 456, DateTimeKind.Local).AddTicks(8919),
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            Content = "Quas inventore pariatur.",
                            RealEstateId = 6,
                            TimeOfCreation = new DateTime(2020, 9, 28, 22, 52, 3, 667, DateTimeKind.Local).AddTicks(6271),
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            Content = "Omnis omnis aspernatur laboriosam architecto quasi illum.",
                            RealEstateId = 17,
                            TimeOfCreation = new DateTime(2020, 9, 29, 18, 17, 20, 74, DateTimeKind.Local).AddTicks(2721),
                            UserId = 3
                        },
                        new
                        {
                            Id = 15,
                            Content = "Consequatur nam recusandae tenetur odit nihil ut.",
                            RealEstateId = 7,
                            TimeOfCreation = new DateTime(2020, 9, 29, 9, 16, 49, 905, DateTimeKind.Local).AddTicks(5674),
                            UserId = 4
                        },
                        new
                        {
                            Id = 16,
                            Content = "Ducimus qui quos quia laboriosam.",
                            RealEstateId = 19,
                            TimeOfCreation = new DateTime(2020, 9, 29, 0, 26, 32, 688, DateTimeKind.Local).AddTicks(5171),
                            UserId = 3
                        },
                        new
                        {
                            Id = 17,
                            Content = "Eos libero nisi nam possimus hic in eos dolores.",
                            RealEstateId = 11,
                            TimeOfCreation = new DateTime(2020, 9, 29, 0, 9, 9, 22, DateTimeKind.Local).AddTicks(7684),
                            UserId = 2
                        },
                        new
                        {
                            Id = 18,
                            Content = "Quisquam praesentium sunt.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 29, 8, 54, 6, 258, DateTimeKind.Local).AddTicks(4653),
                            UserId = 2
                        },
                        new
                        {
                            Id = 19,
                            Content = "Accusamus fugit consequatur itaque.",
                            RealEstateId = 4,
                            TimeOfCreation = new DateTime(2020, 9, 29, 5, 25, 0, 855, DateTimeKind.Local).AddTicks(1366),
                            UserId = 4
                        },
                        new
                        {
                            Id = 20,
                            Content = "Et qui exercitationem omnis ab consequuntur nihil optio quia.",
                            RealEstateId = 10,
                            TimeOfCreation = new DateTime(2020, 9, 29, 10, 49, 42, 767, DateTimeKind.Local).AddTicks(5494),
                            UserId = 4
                        },
                        new
                        {
                            Id = 21,
                            Content = "Fugiat ea aliquid magnam at.",
                            RealEstateId = 6,
                            TimeOfCreation = new DateTime(2020, 9, 29, 14, 2, 35, 917, DateTimeKind.Local).AddTicks(1404),
                            UserId = 1
                        },
                        new
                        {
                            Id = 22,
                            Content = "Neque delectus qui velit recusandae voluptatem vero ea.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 29, 8, 38, 54, 386, DateTimeKind.Local).AddTicks(5917),
                            UserId = 1
                        },
                        new
                        {
                            Id = 23,
                            Content = "Enim assumenda sed vero nihil aut exercitationem.",
                            RealEstateId = 5,
                            TimeOfCreation = new DateTime(2020, 9, 29, 8, 25, 11, 745, DateTimeKind.Local).AddTicks(3952),
                            UserId = 4
                        },
                        new
                        {
                            Id = 24,
                            Content = "Quibusdam voluptas eaque impedit praesentium.",
                            RealEstateId = 16,
                            TimeOfCreation = new DateTime(2020, 9, 29, 12, 47, 10, 134, DateTimeKind.Local).AddTicks(200),
                            UserId = 4
                        },
                        new
                        {
                            Id = 25,
                            Content = "Vel tempora similique voluptas minus pariatur consectetur.",
                            RealEstateId = 14,
                            TimeOfCreation = new DateTime(2020, 9, 29, 4, 22, 3, 20, DateTimeKind.Local).AddTicks(6676),
                            UserId = 4
                        },
                        new
                        {
                            Id = 26,
                            Content = "Voluptas nesciunt placeat.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 28, 22, 32, 52, 532, DateTimeKind.Local).AddTicks(9722),
                            UserId = 4
                        },
                        new
                        {
                            Id = 27,
                            Content = "Molestiae error quia enim reprehenderit aliquam.",
                            RealEstateId = 12,
                            TimeOfCreation = new DateTime(2020, 9, 29, 3, 23, 58, 485, DateTimeKind.Local).AddTicks(1252),
                            UserId = 1
                        },
                        new
                        {
                            Id = 28,
                            Content = "Ipsam in quo et perspiciatis praesentium quod ipsa velit temporibus.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 29, 18, 12, 51, 124, DateTimeKind.Local).AddTicks(1413),
                            UserId = 2
                        },
                        new
                        {
                            Id = 29,
                            Content = "Et voluptas pariatur deserunt rerum explicabo voluptatum quasi tempora nostrum.",
                            RealEstateId = 3,
                            TimeOfCreation = new DateTime(2020, 9, 29, 4, 57, 2, 3, DateTimeKind.Local).AddTicks(2770),
                            UserId = 3
                        },
                        new
                        {
                            Id = 30,
                            Content = "Quo ipsam quisquam quo dolores nostrum sunt.",
                            RealEstateId = 4,
                            TimeOfCreation = new DateTime(2020, 9, 29, 10, 56, 48, 889, DateTimeKind.Local).AddTicks(5453),
                            UserId = 2
                        },
                        new
                        {
                            Id = 31,
                            Content = "Cumque consequatur sint odio.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 29, 13, 45, 22, 858, DateTimeKind.Local).AddTicks(8368),
                            UserId = 2
                        },
                        new
                        {
                            Id = 32,
                            Content = "Incidunt aliquid et ea perferendis eum voluptatem nihil et.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 29, 12, 8, 56, 591, DateTimeKind.Local).AddTicks(83),
                            UserId = 4
                        },
                        new
                        {
                            Id = 33,
                            Content = "Quae sed quia rerum.",
                            RealEstateId = 4,
                            TimeOfCreation = new DateTime(2020, 9, 29, 8, 33, 50, 971, DateTimeKind.Local).AddTicks(4559),
                            UserId = 2
                        },
                        new
                        {
                            Id = 34,
                            Content = "Aut deleniti sed voluptate quis itaque.",
                            RealEstateId = 2,
                            TimeOfCreation = new DateTime(2020, 9, 29, 8, 52, 30, 733, DateTimeKind.Local).AddTicks(7642),
                            UserId = 1
                        },
                        new
                        {
                            Id = 35,
                            Content = "Sit enim qui sit amet est voluptates impedit sit.",
                            RealEstateId = 2,
                            TimeOfCreation = new DateTime(2020, 9, 28, 19, 43, 35, 875, DateTimeKind.Local).AddTicks(2261),
                            UserId = 3
                        },
                        new
                        {
                            Id = 36,
                            Content = "Repellendus repellat alias expedita et.",
                            RealEstateId = 5,
                            TimeOfCreation = new DateTime(2020, 9, 28, 21, 51, 30, 812, DateTimeKind.Local).AddTicks(5251),
                            UserId = 4
                        },
                        new
                        {
                            Id = 37,
                            Content = "Omnis voluptatum nihil officiis rerum repellat facilis dignissimos quia.",
                            RealEstateId = 7,
                            TimeOfCreation = new DateTime(2020, 9, 29, 5, 23, 34, 162, DateTimeKind.Local).AddTicks(6685),
                            UserId = 2
                        },
                        new
                        {
                            Id = 38,
                            Content = "Dolores assumenda eos perferendis iusto aut.",
                            RealEstateId = 10,
                            TimeOfCreation = new DateTime(2020, 9, 29, 4, 4, 55, 490, DateTimeKind.Local).AddTicks(3796),
                            UserId = 2
                        },
                        new
                        {
                            Id = 39,
                            Content = "A quia suscipit voluptate consequatur veniam veniam.",
                            RealEstateId = 8,
                            TimeOfCreation = new DateTime(2020, 9, 29, 16, 49, 6, 740, DateTimeKind.Local).AddTicks(2788),
                            UserId = 4
                        },
                        new
                        {
                            Id = 40,
                            Content = "Sed aut omnis ipsam.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 29, 16, 51, 24, 446, DateTimeKind.Local).AddTicks(811),
                            UserId = 2
                        },
                        new
                        {
                            Id = 41,
                            Content = "Inventore ea ut necessitatibus vel eos ut autem temporibus debitis.",
                            RealEstateId = 17,
                            TimeOfCreation = new DateTime(2020, 9, 28, 20, 52, 53, 173, DateTimeKind.Local).AddTicks(9020),
                            UserId = 1
                        },
                        new
                        {
                            Id = 42,
                            Content = "Hic laudantium nam laborum officia ad nesciunt saepe illum provident.",
                            RealEstateId = 12,
                            TimeOfCreation = new DateTime(2020, 9, 29, 18, 24, 59, 452, DateTimeKind.Local).AddTicks(4128),
                            UserId = 4
                        },
                        new
                        {
                            Id = 43,
                            Content = "Aut optio est et ullam consectetur temporibus quia quisquam.",
                            RealEstateId = 20,
                            TimeOfCreation = new DateTime(2020, 9, 29, 12, 43, 24, 807, DateTimeKind.Local).AddTicks(9520),
                            UserId = 3
                        },
                        new
                        {
                            Id = 44,
                            Content = "Corrupti dolores assumenda dolores.",
                            RealEstateId = 7,
                            TimeOfCreation = new DateTime(2020, 9, 28, 19, 45, 52, 200, DateTimeKind.Local).AddTicks(7604),
                            UserId = 3
                        },
                        new
                        {
                            Id = 45,
                            Content = "Exercitationem et numquam.",
                            RealEstateId = 8,
                            TimeOfCreation = new DateTime(2020, 9, 29, 9, 49, 41, 36, DateTimeKind.Local).AddTicks(2132),
                            UserId = 3
                        },
                        new
                        {
                            Id = 46,
                            Content = "Qui nihil repudiandae magni.",
                            RealEstateId = 7,
                            TimeOfCreation = new DateTime(2020, 9, 28, 23, 47, 40, 731, DateTimeKind.Local).AddTicks(4661),
                            UserId = 3
                        },
                        new
                        {
                            Id = 47,
                            Content = "Ut sint quo.",
                            RealEstateId = 6,
                            TimeOfCreation = new DateTime(2020, 9, 29, 8, 11, 39, 442, DateTimeKind.Local).AddTicks(9473),
                            UserId = 3
                        },
                        new
                        {
                            Id = 48,
                            Content = "Ut et ipsa qui tempore qui ab aperiam.",
                            RealEstateId = 12,
                            TimeOfCreation = new DateTime(2020, 9, 29, 15, 16, 33, 184, DateTimeKind.Local).AddTicks(8289),
                            UserId = 4
                        },
                        new
                        {
                            Id = 49,
                            Content = "Aut quae reprehenderit maxime molestias laudantium fuga ut sit.",
                            RealEstateId = 12,
                            TimeOfCreation = new DateTime(2020, 9, 28, 21, 36, 30, 495, DateTimeKind.Local).AddTicks(5109),
                            UserId = 4
                        },
                        new
                        {
                            Id = 50,
                            Content = "Quibusdam ea quas voluptatibus nobis omnis praesentium velit.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 28, 22, 52, 36, 635, DateTimeKind.Local).AddTicks(257),
                            UserId = 2
                        },
                        new
                        {
                            Id = 51,
                            Content = "Facilis inventore voluptas sed libero.",
                            RealEstateId = 12,
                            TimeOfCreation = new DateTime(2020, 9, 29, 11, 26, 33, 551, DateTimeKind.Local).AddTicks(4638),
                            UserId = 3
                        },
                        new
                        {
                            Id = 52,
                            Content = "Necessitatibus ipsa officiis assumenda quia magni occaecati quis.",
                            RealEstateId = 7,
                            TimeOfCreation = new DateTime(2020, 9, 29, 12, 42, 18, 517, DateTimeKind.Local).AddTicks(8064),
                            UserId = 2
                        },
                        new
                        {
                            Id = 53,
                            Content = "Ducimus officiis asperiores perspiciatis ab saepe aut ut sunt.",
                            RealEstateId = 15,
                            TimeOfCreation = new DateTime(2020, 9, 28, 20, 3, 25, 35, DateTimeKind.Local).AddTicks(3484),
                            UserId = 4
                        },
                        new
                        {
                            Id = 54,
                            Content = "Et voluptate vero alias ut et.",
                            RealEstateId = 5,
                            TimeOfCreation = new DateTime(2020, 9, 29, 0, 50, 47, 611, DateTimeKind.Local).AddTicks(6836),
                            UserId = 4
                        },
                        new
                        {
                            Id = 55,
                            Content = "Commodi et numquam deleniti est earum repudiandae fugiat ea minus.",
                            RealEstateId = 12,
                            TimeOfCreation = new DateTime(2020, 9, 29, 18, 11, 11, 576, DateTimeKind.Local).AddTicks(9291),
                            UserId = 1
                        },
                        new
                        {
                            Id = 56,
                            Content = "Doloribus et ducimus ratione est sunt facilis ullam ipsa.",
                            RealEstateId = 11,
                            TimeOfCreation = new DateTime(2020, 9, 29, 14, 1, 1, 756, DateTimeKind.Local).AddTicks(2713),
                            UserId = 1
                        },
                        new
                        {
                            Id = 57,
                            Content = "Veniam autem debitis magnam id quam ut et.",
                            RealEstateId = 6,
                            TimeOfCreation = new DateTime(2020, 9, 29, 10, 32, 58, 38, DateTimeKind.Local).AddTicks(1059),
                            UserId = 3
                        },
                        new
                        {
                            Id = 58,
                            Content = "Mollitia distinctio esse eum aspernatur hic.",
                            RealEstateId = 19,
                            TimeOfCreation = new DateTime(2020, 9, 28, 22, 36, 46, 13, DateTimeKind.Local).AddTicks(6004),
                            UserId = 2
                        },
                        new
                        {
                            Id = 59,
                            Content = "Qui dolorum molestiae.",
                            RealEstateId = 14,
                            TimeOfCreation = new DateTime(2020, 9, 29, 13, 18, 27, 292, DateTimeKind.Local).AddTicks(3396),
                            UserId = 1
                        },
                        new
                        {
                            Id = 60,
                            Content = "Qui repudiandae eos.",
                            RealEstateId = 6,
                            TimeOfCreation = new DateTime(2020, 9, 28, 20, 13, 55, 910, DateTimeKind.Local).AddTicks(3101),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RealEstateId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RealEstateId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("RatingUserId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("RatingUserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 4
                        },
                        new
                        {
                            Id = 2,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 1
                        },
                        new
                        {
                            Id = 3,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 5
                        },
                        new
                        {
                            Id = 4,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 3
                        },
                        new
                        {
                            Id = 5,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 5
                        },
                        new
                        {
                            Id = 6,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 4
                        },
                        new
                        {
                            Id = 7,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 2
                        },
                        new
                        {
                            Id = 8,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 5
                        },
                        new
                        {
                            Id = 9,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 3
                        },
                        new
                        {
                            Id = 10,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 4
                        },
                        new
                        {
                            Id = 11,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 2
                        },
                        new
                        {
                            Id = 12,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 4
                        },
                        new
                        {
                            Id = 13,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 2
                        },
                        new
                        {
                            Id = 14,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 2
                        },
                        new
                        {
                            Id = 15,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 1
                        },
                        new
                        {
                            Id = 16,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 1
                        },
                        new
                        {
                            Id = 17,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 3
                        },
                        new
                        {
                            Id = 18,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 1
                        },
                        new
                        {
                            Id = 19,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 1
                        },
                        new
                        {
                            Id = 20,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 3
                        },
                        new
                        {
                            Id = 21,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 5
                        },
                        new
                        {
                            Id = 22,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 4
                        },
                        new
                        {
                            Id = 23,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 5
                        },
                        new
                        {
                            Id = 24,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 2
                        },
                        new
                        {
                            Id = 25,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 3
                        },
                        new
                        {
                            Id = 26,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 3
                        },
                        new
                        {
                            Id = 27,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 5
                        },
                        new
                        {
                            Id = 28,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 1
                        },
                        new
                        {
                            Id = 29,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 1
                        },
                        new
                        {
                            Id = 30,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 5
                        },
                        new
                        {
                            Id = 31,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 4
                        },
                        new
                        {
                            Id = 32,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 3
                        },
                        new
                        {
                            Id = 33,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 3
                        },
                        new
                        {
                            Id = 34,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 4
                        },
                        new
                        {
                            Id = 35,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 4
                        },
                        new
                        {
                            Id = 36,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 3
                        },
                        new
                        {
                            Id = 37,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 3
                        },
                        new
                        {
                            Id = 38,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 4
                        },
                        new
                        {
                            Id = 39,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 3
                        },
                        new
                        {
                            Id = 40,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 2
                        });
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.RealEstate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConstructionYear")
                        .HasColumnName("YearBuilt")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfAdvertCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsRentable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSellable")
                        .HasColumnType("bit");

                    b.Property<string>("ListingUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Rent")
                        .HasColumnType("money");

                    b.Property<int>("Rooms")
                        .HasColumnType("int");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("money");

                    b.Property<int>("SquareMeters")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RealEstates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "91073 Feest Spurs, West Wilfridville, Senegal",
                            City = "Littelville",
                            ConstructionYear = 1644,
                            Contact = "Laurine Carroll, $1908 Antone Manors, South Araceli, Sri Lanka",
                            DateOfAdvertCreation = new DateTime(1644, 12, 23, 14, 5, 42, 386, DateTimeKind.Unspecified).AddTicks(4720),
                            Description = "Voluptatem fuga laudantium non ratione.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "http://kaia.name",
                            Rent = 0m,
                            Rooms = 50,
                            SellPrice = 1096466m,
                            SquareMeters = 4412,
                            Title = "laboriosam",
                            Type = 0,
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            Address = "610 Zachariah River, North Josefort, Turkmenistan",
                            City = "Port Arnoport",
                            ConstructionYear = 1748,
                            Contact = "Minnie Powlowski, $09659 Arthur Falls, Port Aglaeside, Haiti",
                            DateOfAdvertCreation = new DateTime(1748, 6, 23, 12, 29, 43, 38, DateTimeKind.Unspecified).AddTicks(1469),
                            Description = "Molestias adipisci voluptatem ducimus atque.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "https://eugenia.com",
                            Rent = 0m,
                            Rooms = 43,
                            SellPrice = 2096745m,
                            SquareMeters = 415,
                            Title = "aut",
                            Type = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "013 Mueller Streets, Goyetteville, Bermuda",
                            City = "Lake Benland",
                            ConstructionYear = 1982,
                            Contact = "Corrine Wolff, $59284 Gibson Bypass, Walshburgh, Mozambique",
                            DateOfAdvertCreation = new DateTime(1982, 6, 17, 17, 37, 15, 369, DateTimeKind.Unspecified).AddTicks(4511),
                            Description = "Illum architecto labore animi qui dolorem qui dolore dignissimos sit.",
                            IsRentable = true,
                            IsSellable = false,
                            ListingUrl = "https://lysanne.org",
                            Rent = 8028m,
                            Rooms = 15,
                            SellPrice = 0m,
                            SquareMeters = 225,
                            Title = "dolores",
                            Type = 3,
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Address = "95585 Johnpaul Forge, West Vern, Madagascar",
                            City = "Port Koreyburgh",
                            ConstructionYear = 1638,
                            Contact = "Kylee Hyatt, $40968 Bernhard Bypass, Veumshire, Slovenia",
                            DateOfAdvertCreation = new DateTime(1638, 4, 28, 17, 28, 16, 899, DateTimeKind.Unspecified).AddTicks(664),
                            Description = "Asperiores expedita quia cum cupiditate error quia.",
                            IsRentable = true,
                            IsSellable = false,
                            ListingUrl = "http://mathew.biz",
                            Rent = 11503m,
                            Rooms = 6,
                            SellPrice = 0m,
                            SquareMeters = 4065,
                            Title = "neque",
                            Type = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Address = "9480 Stracke Parkway, South Royalstad, San Marino",
                            City = "East Yessenia",
                            ConstructionYear = 1600,
                            Contact = "Arnaldo Powlowski, $2774 Moen Hills, Freemanville, American Samoa",
                            DateOfAdvertCreation = new DateTime(1600, 3, 26, 11, 22, 23, 753, DateTimeKind.Unspecified).AddTicks(9992),
                            Description = "Possimus beatae cumque molestias cupiditate.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "https://delilah.info",
                            Rent = 0m,
                            Rooms = 49,
                            SellPrice = 1395514m,
                            SquareMeters = 1212,
                            Title = "optio",
                            Type = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Address = "918 Lebsack Highway, Port Myronborough, Georgia",
                            City = "Olsonburgh",
                            ConstructionYear = 1937,
                            Contact = "Lyla Terry, $5500 Nick Shores, Briaside, Spain",
                            DateOfAdvertCreation = new DateTime(1937, 1, 18, 22, 18, 22, 769, DateTimeKind.Unspecified).AddTicks(174),
                            Description = "Temporibus minima id atque voluptatem repellat quos consequatur facilis tenetur.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "https://eileen.org",
                            Rent = 0m,
                            Rooms = 25,
                            SellPrice = 2463133m,
                            SquareMeters = 2944,
                            Title = "nostrum",
                            Type = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Address = "4394 Watsica Summit, North Oscarhaven, Marshall Islands",
                            City = "East Alberthamouth",
                            ConstructionYear = 1779,
                            Contact = "Lilyan Kshlerin, $34772 Lind Place, South Enaberg, Madagascar",
                            DateOfAdvertCreation = new DateTime(1779, 5, 1, 5, 46, 17, 18, DateTimeKind.Unspecified).AddTicks(322),
                            Description = "Necessitatibus dolor maxime animi qui et tempora dolorum dolorem.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "http://colleen.com",
                            Rent = 0m,
                            Rooms = 49,
                            SellPrice = 2061780m,
                            SquareMeters = 3581,
                            Title = "blanditiis",
                            Type = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            Address = "874 Kilback Row, Port Shaylee, Sweden",
                            City = "New Estefania",
                            ConstructionYear = 1630,
                            Contact = "Oral Zieme, $65166 Gino Loop, Anahishire, Belgium",
                            DateOfAdvertCreation = new DateTime(1630, 3, 24, 13, 21, 47, 466, DateTimeKind.Unspecified).AddTicks(8661),
                            Description = "Voluptatem minima ut ut ex quae nihil.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "http://christophe.name",
                            Rent = 0m,
                            Rooms = 42,
                            SellPrice = 666453m,
                            SquareMeters = 1818,
                            Title = "et",
                            Type = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            Address = "6002 Ally Knolls, New Bridie, Gambia",
                            City = "Cecilborough",
                            ConstructionYear = 1942,
                            Contact = "Ludie Lang, $775 Wanda Flats, Leonieville, Mayotte",
                            DateOfAdvertCreation = new DateTime(1942, 9, 4, 19, 4, 32, 70, DateTimeKind.Unspecified).AddTicks(6812),
                            Description = "Non quis asperiores ab quia quis.",
                            IsRentable = true,
                            IsSellable = false,
                            ListingUrl = "https://rowan.biz",
                            Rent = 7232m,
                            Rooms = 34,
                            SellPrice = 0m,
                            SquareMeters = 141,
                            Title = "mollitia",
                            Type = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            Address = "371 Abbigail Flat, Lake Kaylahchester, New Zealand",
                            City = "Isaiasmouth",
                            ConstructionYear = 1899,
                            Contact = "Kade Paucek, $52733 Murphy Field, Yadiramouth, Indonesia",
                            DateOfAdvertCreation = new DateTime(1899, 5, 23, 21, 49, 14, 998, DateTimeKind.Unspecified).AddTicks(3718),
                            Description = "Iusto perferendis vero eius nihil.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "https://seth.org",
                            Rent = 0m,
                            Rooms = 39,
                            SellPrice = 1257418m,
                            SquareMeters = 4776,
                            Title = "aut",
                            Type = 0,
                            UserId = 4
                        },
                        new
                        {
                            Id = 11,
                            Address = "6990 Earlene Coves, South Sandrafurt, Equatorial Guinea",
                            City = "Marvinberg",
                            ConstructionYear = 1999,
                            Contact = "Norwood Balistreri, $29490 Hellen Ridges, South Tomasatown, Cape Verde",
                            DateOfAdvertCreation = new DateTime(1999, 8, 11, 17, 6, 12, 320, DateTimeKind.Unspecified).AddTicks(6539),
                            Description = "Rerum nihil voluptatem.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "http://matteo.info",
                            Rent = 0m,
                            Rooms = 15,
                            SellPrice = 1375355m,
                            SquareMeters = 2602,
                            Title = "odio",
                            Type = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            Address = "31125 Schmitt Pines, Horaciochester, Greenland",
                            City = "Jerrellland",
                            ConstructionYear = 1728,
                            Contact = "Frank Gutkowski, $21636 Delphia Island, Emmaleetown, Moldova",
                            DateOfAdvertCreation = new DateTime(1728, 3, 31, 13, 15, 59, 191, DateTimeKind.Unspecified).AddTicks(3863),
                            Description = "Accusamus blanditiis voluptas et recusandae molestiae explicabo possimus fugiat.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "https://irving.com",
                            Rent = 0m,
                            Rooms = 6,
                            SellPrice = 1855715m,
                            SquareMeters = 1280,
                            Title = "illum",
                            Type = 0,
                            UserId = 3
                        },
                        new
                        {
                            Id = 13,
                            Address = "54163 Ernestina Club, Port Meaghan, Zambia",
                            City = "Lake Kiel",
                            ConstructionYear = 1757,
                            Contact = "Chyna Bartoletti, $769 Tracey Summit, Rosemaryview, Iraq",
                            DateOfAdvertCreation = new DateTime(1757, 2, 26, 1, 42, 36, 325, DateTimeKind.Unspecified).AddTicks(6531),
                            Description = "Ut et cupiditate esse ex sit.",
                            IsRentable = true,
                            IsSellable = false,
                            ListingUrl = "http://delmer.name",
                            Rent = 4636m,
                            Rooms = 15,
                            SellPrice = 0m,
                            SquareMeters = 2812,
                            Title = "eos",
                            Type = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 14,
                            Address = "5323 Senger Station, New Winnifred, Ghana",
                            City = "South Anjalichester",
                            ConstructionYear = 1864,
                            Contact = "Kyle Hintz, $2805 Rohan Drive, Croninchester, Anguilla",
                            DateOfAdvertCreation = new DateTime(1864, 12, 5, 5, 29, 40, 144, DateTimeKind.Unspecified).AddTicks(6619),
                            Description = "Consectetur quisquam ut tempore voluptatem quia expedita qui dicta.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "http://kendra.info",
                            Rent = 0m,
                            Rooms = 17,
                            SellPrice = 185109m,
                            SquareMeters = 1788,
                            Title = "magni",
                            Type = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            Address = "01992 Toni Wall, West Ismael, Colombia",
                            City = "New Emelia",
                            ConstructionYear = 1691,
                            Contact = "Luigi Hills, $207 Grady Shoals, Berniermouth, Sri Lanka",
                            DateOfAdvertCreation = new DateTime(1691, 1, 25, 4, 43, 57, 562, DateTimeKind.Unspecified).AddTicks(4736),
                            Description = "Labore minima natus.",
                            IsRentable = true,
                            IsSellable = false,
                            ListingUrl = "http://fidel.org",
                            Rent = 5169m,
                            Rooms = 18,
                            SellPrice = 0m,
                            SquareMeters = 3242,
                            Title = "odio",
                            Type = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 16,
                            Address = "68998 Watsica Highway, McKenzieside, India",
                            City = "Abbottside",
                            ConstructionYear = 1986,
                            Contact = "Isabell Parker, $5486 Eloisa Street, Abnerborough, Canada",
                            DateOfAdvertCreation = new DateTime(1986, 7, 24, 11, 38, 17, 70, DateTimeKind.Unspecified).AddTicks(8565),
                            Description = "Delectus autem quos id occaecati repellendus quis ut nemo ullam.",
                            IsRentable = true,
                            IsSellable = false,
                            ListingUrl = "https://axel.net",
                            Rent = 10702m,
                            Rooms = 41,
                            SellPrice = 0m,
                            SquareMeters = 4081,
                            Title = "quis",
                            Type = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 17,
                            Address = "135 Kihn Junction, Declanport, Tokelau",
                            City = "South Rossville",
                            ConstructionYear = 1646,
                            Contact = "Franco Lueilwitz, $66463 Violet Station, Stephanyland, Turks and Caicos Islands",
                            DateOfAdvertCreation = new DateTime(1646, 6, 9, 20, 1, 14, 970, DateTimeKind.Unspecified).AddTicks(4711),
                            Description = "Ipsam quod corrupti.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "http://gregoria.org",
                            Rent = 0m,
                            Rooms = 18,
                            SellPrice = 2048930m,
                            SquareMeters = 3765,
                            Title = "officiis",
                            Type = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 18,
                            Address = "4760 Nikko Passage, Strosinchester, Suriname",
                            City = "North Goldenville",
                            ConstructionYear = 1605,
                            Contact = "Hubert Bailey, $61496 Cyrus Station, Rowemouth, Togo",
                            DateOfAdvertCreation = new DateTime(1605, 5, 21, 13, 11, 30, 167, DateTimeKind.Unspecified).AddTicks(8604),
                            Description = "Fugiat assumenda ut repudiandae est tenetur.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "http://lonnie.info",
                            Rent = 0m,
                            Rooms = 14,
                            SellPrice = 809079m,
                            SquareMeters = 1842,
                            Title = "ipsam",
                            Type = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 19,
                            Address = "4222 Wendy Ramp, Haagburgh, Cayman Islands",
                            City = "Kohlerburgh",
                            ConstructionYear = 1609,
                            Contact = "Vicenta Gislason, $788 Faustino Cove, Loganbury, Macedonia",
                            DateOfAdvertCreation = new DateTime(1609, 11, 24, 3, 8, 52, 455, DateTimeKind.Unspecified).AddTicks(8981),
                            Description = "Porro cupiditate nihil enim debitis blanditiis culpa ut adipisci.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "https://allison.biz",
                            Rent = 0m,
                            Rooms = 15,
                            SellPrice = 2470543m,
                            SquareMeters = 4937,
                            Title = "molestias",
                            Type = 1,
                            UserId = 4
                        },
                        new
                        {
                            Id = 20,
                            Address = "409 Franecki Ports, East Lukas, Seychelles",
                            City = "Laishafurt",
                            ConstructionYear = 1682,
                            Contact = "Brielle Moen, $460 Rolfson Avenue, New Reubentown, Somalia",
                            DateOfAdvertCreation = new DateTime(1682, 12, 23, 23, 20, 0, 724, DateTimeKind.Unspecified).AddTicks(2177),
                            Description = "Voluptate distinctio dolorem sunt sed sit autem.",
                            IsRentable = false,
                            IsSellable = true,
                            ListingUrl = "http://dandre.com",
                            Rent = 0m,
                            Rooms = 27,
                            SellPrice = 725558m,
                            SquareMeters = 3792,
                            Title = "incidunt",
                            Type = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68e01f8c-ba04-416e-9e53-dab4c5f2e50d",
                            Email = "bamse@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "BAMSE@GMAIL.COM",
                            NormalizedUserName = "BAMSE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAR00VgEXuNcTRL9aekKB86ar4F2D+pRmar9AGvUw/Fnxxe531NIpGwsPAi56bxqTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DRGRSWDQ5C5MZZBZQUWDGHQRW66QI5D6",
                            TwoFactorEnabled = false,
                            UserName = "bamse@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3d90eb5-90d9-4f69-97bd-057f32692f84",
                            Email = "skalman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SKALMAN@GMAIL.COM",
                            NormalizedUserName = "SKALMAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEOcqQ00ZZaNxwRK5lJGV1RPtl7rGeeMIlietoHd62yeavAR3PsuAGrBI8TWClg/qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "P7HU2IDVNJQEYMGXCN55NQHELVS3TECN",
                            TwoFactorEnabled = false,
                            UserName = "skalman@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c6ba646-058a-4876-ab51-e681e26f74d3",
                            Email = "alfons@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ALFONS@GMAIL.COM",
                            NormalizedUserName = "ALFONS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGFDh/g9WmY5IWx5cxkE44yyV5a6ucoFfhUcoe8DmVNIP5Ror9j1dYRxA2zKQMXG0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "K4GFE2ZZLA7BRDI3VWC2M2N2ILHKE6X3",
                            TwoFactorEnabled = false,
                            UserName = "alfons@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a638d86b-eac1-4338-90c3-a0f9b42ac60f",
                            Email = "laban@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "LABAN@GMAIL.COMm",
                            NormalizedUserName = "LABAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMD595Y3JYWe+nH1AIQhsN6Ft74vry91PDj0/7Mt4ZZoFim856jomEAfq92mo8LHuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NW6F2HLUH24CNHBFUNW54LVDZVNG3ALB",
                            TwoFactorEnabled = false,
                            UserName = "laban@gmail.com"
                        });
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.Comment", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("GroupAssignmentTeamBlue.Model.RealEstate", "RealEstateInQuestion")
                        .WithMany("Comments")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupAssignmentTeamBlue.Model.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.Picture", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.RealEstate", null)
                        .WithMany("Pictures")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.Rating", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.User", "RatedUser")
                        .WithMany("RatingsRecieved")
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GroupAssignmentTeamBlue.Model.User", "RatingUser")
                        .WithMany("RatingsMade")
                        .HasForeignKey("RatingUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.RealEstate", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.User", "User")
                        .WithMany("RealEstates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupAssignmentTeamBlue.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
