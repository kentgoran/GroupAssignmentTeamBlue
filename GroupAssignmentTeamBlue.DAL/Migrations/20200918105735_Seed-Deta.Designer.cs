// <auto-generated />
using System;
using GroupAssignmentTeamBlue.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GroupAssignmentTeamBlue.DAL.Migrations
{
    [DbContext(typeof(AdvertContext))]
    [Migration("20200918105735_Seed-Deta")]
    partial class SeedDeta
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("RealEstateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("RealEstateId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Tempore aut odio sed similique pariatur neque aut in tenetur.",
                            RealEstateId = 11,
                            TimeOfCreation = new DateTime(2020, 9, 17, 15, 30, 52, 790, DateTimeKind.Local).AddTicks(5600),
                            UserId = 4
                        },
                        new
                        {
                            Id = 2,
                            Content = "Fugiat assumenda ut repudiandae est tenetur.",
                            RealEstateId = 16,
                            TimeOfCreation = new DateTime(2020, 9, 18, 4, 19, 33, 974, DateTimeKind.Local).AddTicks(1772),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Content = "Alias non eius.",
                            RealEstateId = 11,
                            TimeOfCreation = new DateTime(2020, 9, 18, 2, 29, 26, 685, DateTimeKind.Local).AddTicks(1842),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Repudiandae rerum autem omnis error necessitatibus.",
                            RealEstateId = 17,
                            TimeOfCreation = new DateTime(2020, 9, 17, 21, 32, 19, 610, DateTimeKind.Local).AddTicks(2792),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Qui voluptatum omnis est voluptatem quo accusamus est nulla.",
                            RealEstateId = 11,
                            TimeOfCreation = new DateTime(2020, 9, 18, 4, 56, 55, 588, DateTimeKind.Local).AddTicks(5565),
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Content = "Iure ut dicta.",
                            RealEstateId = 6,
                            TimeOfCreation = new DateTime(2020, 9, 17, 22, 29, 37, 511, DateTimeKind.Local).AddTicks(8591),
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            Content = "Aliquid consequatur enim molestias quo porro cupiditate nihil.",
                            RealEstateId = 8,
                            TimeOfCreation = new DateTime(2020, 9, 18, 8, 10, 7, 656, DateTimeKind.Local).AddTicks(2105),
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "Ut adipisci et a voluptatem aliquid reiciendis.",
                            RealEstateId = 6,
                            TimeOfCreation = new DateTime(2020, 9, 17, 15, 55, 16, 798, DateTimeKind.Local).AddTicks(7117),
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Eos nulla tempore et ea cupiditate deleniti dolores voluptatem.",
                            RealEstateId = 8,
                            TimeOfCreation = new DateTime(2020, 9, 18, 4, 35, 54, 266, DateTimeKind.Local).AddTicks(7875),
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            Content = "Quia aliquam at corporis.",
                            RealEstateId = 20,
                            TimeOfCreation = new DateTime(2020, 9, 17, 20, 50, 30, 674, DateTimeKind.Local).AddTicks(8496),
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            Content = "Illum voluptatem eveniet illum laudantium ad qui ipsa eius maiores.",
                            RealEstateId = 7,
                            TimeOfCreation = new DateTime(2020, 9, 18, 9, 2, 7, 338, DateTimeKind.Local).AddTicks(5661),
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            Content = "Distinctio dolorem sunt sed sit autem.",
                            RealEstateId = 6,
                            TimeOfCreation = new DateTime(2020, 9, 18, 7, 24, 44, 978, DateTimeKind.Local).AddTicks(9479),
                            UserId = 3
                        },
                        new
                        {
                            Id = 13,
                            Content = "Temporibus nihil facere consequatur et cum inventore amet.",
                            RealEstateId = 8,
                            TimeOfCreation = new DateTime(2020, 9, 18, 9, 40, 45, 683, DateTimeKind.Local).AddTicks(6753),
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            Content = "Est vel earum dolore expedita qui aspernatur doloribus iure.",
                            RealEstateId = 15,
                            TimeOfCreation = new DateTime(2020, 9, 17, 17, 9, 33, 875, DateTimeKind.Local).AddTicks(4717),
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            Content = "Est numquam adipisci voluptatibus fuga officia soluta.",
                            RealEstateId = 4,
                            TimeOfCreation = new DateTime(2020, 9, 17, 21, 29, 0, 99, DateTimeKind.Local).AddTicks(7622),
                            UserId = 4
                        },
                        new
                        {
                            Id = 16,
                            Content = "Cupiditate vel perspiciatis perspiciatis non aspernatur non placeat consequatur.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 18, 7, 34, 18, 909, DateTimeKind.Local).AddTicks(1100),
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            Content = "Recusandae eos non eaque.",
                            RealEstateId = 17,
                            TimeOfCreation = new DateTime(2020, 9, 18, 3, 29, 50, 805, DateTimeKind.Local).AddTicks(6867),
                            UserId = 2
                        },
                        new
                        {
                            Id = 18,
                            Content = "Tenetur esse vel.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 18, 6, 5, 54, 312, DateTimeKind.Local).AddTicks(573),
                            UserId = 3
                        },
                        new
                        {
                            Id = 19,
                            Content = "Ut commodi voluptate.",
                            RealEstateId = 10,
                            TimeOfCreation = new DateTime(2020, 9, 17, 16, 17, 19, 923, DateTimeKind.Local).AddTicks(9955),
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            Content = "Voluptas voluptates omnis inventore nostrum facilis eveniet et.",
                            RealEstateId = 11,
                            TimeOfCreation = new DateTime(2020, 9, 17, 18, 3, 59, 93, DateTimeKind.Local).AddTicks(5967),
                            UserId = 1
                        },
                        new
                        {
                            Id = 21,
                            Content = "Quae corrupti distinctio.",
                            RealEstateId = 16,
                            TimeOfCreation = new DateTime(2020, 9, 18, 5, 56, 10, 641, DateTimeKind.Local).AddTicks(9676),
                            UserId = 4
                        },
                        new
                        {
                            Id = 22,
                            Content = "Optio similique in qui dicta quasi.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 17, 17, 46, 26, 515, DateTimeKind.Local).AddTicks(7277),
                            UserId = 4
                        },
                        new
                        {
                            Id = 23,
                            Content = "Et nulla corrupti.",
                            RealEstateId = 18,
                            TimeOfCreation = new DateTime(2020, 9, 18, 2, 4, 34, 460, DateTimeKind.Local).AddTicks(1320),
                            UserId = 3
                        },
                        new
                        {
                            Id = 24,
                            Content = "Atque natus asperiores.",
                            RealEstateId = 20,
                            TimeOfCreation = new DateTime(2020, 9, 18, 7, 51, 43, 78, DateTimeKind.Local).AddTicks(7720),
                            UserId = 2
                        },
                        new
                        {
                            Id = 25,
                            Content = "Occaecati occaecati voluptas nesciunt officia in quisquam est.",
                            RealEstateId = 20,
                            TimeOfCreation = new DateTime(2020, 9, 18, 9, 2, 51, 21, DateTimeKind.Local).AddTicks(5093),
                            UserId = 3
                        },
                        new
                        {
                            Id = 26,
                            Content = "Dignissimos dolor totam doloribus.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 18, 3, 55, 48, 734, DateTimeKind.Local).AddTicks(4236),
                            UserId = 2
                        },
                        new
                        {
                            Id = 27,
                            Content = "Voluptatem ducimus qui accusantium fugiat adipisci.",
                            RealEstateId = 8,
                            TimeOfCreation = new DateTime(2020, 9, 18, 8, 21, 11, 392, DateTimeKind.Local).AddTicks(1846),
                            UserId = 2
                        },
                        new
                        {
                            Id = 28,
                            Content = "Odio sed quae quod non error tempora id et itaque.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 18, 9, 12, 47, 270, DateTimeKind.Local).AddTicks(2271),
                            UserId = 1
                        },
                        new
                        {
                            Id = 29,
                            Content = "Quas inventore pariatur.",
                            RealEstateId = 6,
                            TimeOfCreation = new DateTime(2020, 9, 17, 17, 6, 52, 480, DateTimeKind.Local).AddTicks(9536),
                            UserId = 1
                        },
                        new
                        {
                            Id = 30,
                            Content = "Omnis omnis aspernatur laboriosam architecto quasi illum.",
                            RealEstateId = 17,
                            TimeOfCreation = new DateTime(2020, 9, 18, 12, 32, 8, 887, DateTimeKind.Local).AddTicks(5992),
                            UserId = 3
                        },
                        new
                        {
                            Id = 31,
                            Content = "Consequatur nam recusandae tenetur odit nihil ut.",
                            RealEstateId = 7,
                            TimeOfCreation = new DateTime(2020, 9, 18, 3, 31, 38, 718, DateTimeKind.Local).AddTicks(8924),
                            UserId = 4
                        },
                        new
                        {
                            Id = 32,
                            Content = "Ducimus qui quos quia laboriosam.",
                            RealEstateId = 19,
                            TimeOfCreation = new DateTime(2020, 9, 17, 18, 41, 21, 501, DateTimeKind.Local).AddTicks(8394),
                            UserId = 3
                        },
                        new
                        {
                            Id = 33,
                            Content = "Eos libero nisi nam possimus hic in eos dolores.",
                            RealEstateId = 11,
                            TimeOfCreation = new DateTime(2020, 9, 17, 18, 23, 57, 836, DateTimeKind.Local).AddTicks(888),
                            UserId = 2
                        },
                        new
                        {
                            Id = 34,
                            Content = "Quisquam praesentium sunt.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 18, 3, 8, 55, 71, DateTimeKind.Local).AddTicks(7826),
                            UserId = 2
                        },
                        new
                        {
                            Id = 35,
                            Content = "Accusamus fugit consequatur itaque.",
                            RealEstateId = 4,
                            TimeOfCreation = new DateTime(2020, 9, 17, 23, 39, 49, 668, DateTimeKind.Local).AddTicks(4523),
                            UserId = 4
                        },
                        new
                        {
                            Id = 36,
                            Content = "Et qui exercitationem omnis ab consequuntur nihil optio quia.",
                            RealEstateId = 10,
                            TimeOfCreation = new DateTime(2020, 9, 18, 5, 4, 31, 580, DateTimeKind.Local).AddTicks(8581),
                            UserId = 4
                        },
                        new
                        {
                            Id = 37,
                            Content = "Fugiat ea aliquid magnam at.",
                            RealEstateId = 6,
                            TimeOfCreation = new DateTime(2020, 9, 18, 8, 17, 24, 730, DateTimeKind.Local).AddTicks(4493),
                            UserId = 1
                        },
                        new
                        {
                            Id = 38,
                            Content = "Neque delectus qui velit recusandae voluptatem vero ea.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 18, 2, 53, 43, 199, DateTimeKind.Local).AddTicks(8986),
                            UserId = 1
                        },
                        new
                        {
                            Id = 39,
                            Content = "Enim assumenda sed vero nihil aut exercitationem.",
                            RealEstateId = 5,
                            TimeOfCreation = new DateTime(2020, 9, 18, 2, 40, 0, 558, DateTimeKind.Local).AddTicks(6994),
                            UserId = 4
                        },
                        new
                        {
                            Id = 40,
                            Content = "Quibusdam voluptas eaque impedit praesentium.",
                            RealEstateId = 16,
                            TimeOfCreation = new DateTime(2020, 9, 18, 7, 1, 58, 947, DateTimeKind.Local).AddTicks(3212),
                            UserId = 4
                        },
                        new
                        {
                            Id = 41,
                            Content = "Vel tempora similique voluptas minus pariatur consectetur.",
                            RealEstateId = 14,
                            TimeOfCreation = new DateTime(2020, 9, 17, 22, 36, 51, 833, DateTimeKind.Local).AddTicks(9666),
                            UserId = 4
                        },
                        new
                        {
                            Id = 42,
                            Content = "Voluptas nesciunt placeat.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 17, 16, 47, 41, 346, DateTimeKind.Local).AddTicks(2691),
                            UserId = 4
                        },
                        new
                        {
                            Id = 43,
                            Content = "Molestiae error quia enim reprehenderit aliquam.",
                            RealEstateId = 12,
                            TimeOfCreation = new DateTime(2020, 9, 17, 21, 38, 47, 298, DateTimeKind.Local).AddTicks(4152),
                            UserId = 1
                        },
                        new
                        {
                            Id = 44,
                            Content = "Ipsam in quo et perspiciatis praesentium quod ipsa velit temporibus.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 18, 12, 27, 39, 937, DateTimeKind.Local).AddTicks(4344),
                            UserId = 2
                        },
                        new
                        {
                            Id = 45,
                            Content = "Et voluptas pariatur deserunt rerum explicabo voluptatum quasi tempora nostrum.",
                            RealEstateId = 3,
                            TimeOfCreation = new DateTime(2020, 9, 17, 23, 11, 50, 816, DateTimeKind.Local).AddTicks(5676),
                            UserId = 3
                        },
                        new
                        {
                            Id = 46,
                            Content = "Quo ipsam quisquam quo dolores nostrum sunt.",
                            RealEstateId = 4,
                            TimeOfCreation = new DateTime(2020, 9, 18, 5, 11, 37, 702, DateTimeKind.Local).AddTicks(8329),
                            UserId = 2
                        },
                        new
                        {
                            Id = 47,
                            Content = "Cumque consequatur sint odio.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 18, 8, 0, 11, 672, DateTimeKind.Local).AddTicks(1222),
                            UserId = 2
                        },
                        new
                        {
                            Id = 48,
                            Content = "Incidunt aliquid et ea perferendis eum voluptatem nihil et.",
                            RealEstateId = 9,
                            TimeOfCreation = new DateTime(2020, 9, 18, 6, 23, 45, 404, DateTimeKind.Local).AddTicks(2920),
                            UserId = 4
                        },
                        new
                        {
                            Id = 49,
                            Content = "Quae sed quia rerum.",
                            RealEstateId = 4,
                            TimeOfCreation = new DateTime(2020, 9, 18, 2, 48, 39, 784, DateTimeKind.Local).AddTicks(7316),
                            UserId = 2
                        },
                        new
                        {
                            Id = 50,
                            Content = "Aut deleniti sed voluptate quis itaque.",
                            RealEstateId = 2,
                            TimeOfCreation = new DateTime(2020, 9, 18, 3, 7, 19, 547, DateTimeKind.Local).AddTicks(407),
                            UserId = 1
                        },
                        new
                        {
                            Id = 51,
                            Content = "Sit enim qui sit amet est voluptates impedit sit.",
                            RealEstateId = 2,
                            TimeOfCreation = new DateTime(2020, 9, 17, 13, 58, 24, 688, DateTimeKind.Local).AddTicks(5003),
                            UserId = 3
                        },
                        new
                        {
                            Id = 52,
                            Content = "Repellendus repellat alias expedita et.",
                            RealEstateId = 5,
                            TimeOfCreation = new DateTime(2020, 9, 17, 16, 6, 19, 625, DateTimeKind.Local).AddTicks(7963),
                            UserId = 4
                        },
                        new
                        {
                            Id = 53,
                            Content = "Omnis voluptatum nihil officiis rerum repellat facilis dignissimos quia.",
                            RealEstateId = 7,
                            TimeOfCreation = new DateTime(2020, 9, 17, 23, 38, 22, 975, DateTimeKind.Local).AddTicks(9377),
                            UserId = 2
                        },
                        new
                        {
                            Id = 54,
                            Content = "Dolores assumenda eos perferendis iusto aut.",
                            RealEstateId = 10,
                            TimeOfCreation = new DateTime(2020, 9, 17, 22, 19, 44, 303, DateTimeKind.Local).AddTicks(6461),
                            UserId = 2
                        },
                        new
                        {
                            Id = 55,
                            Content = "A quia suscipit voluptate consequatur veniam veniam.",
                            RealEstateId = 8,
                            TimeOfCreation = new DateTime(2020, 9, 18, 11, 3, 55, 553, DateTimeKind.Local).AddTicks(5430),
                            UserId = 4
                        },
                        new
                        {
                            Id = 56,
                            Content = "Sed aut omnis ipsam.",
                            RealEstateId = 13,
                            TimeOfCreation = new DateTime(2020, 9, 18, 11, 6, 13, 259, DateTimeKind.Local).AddTicks(3375),
                            UserId = 2
                        },
                        new
                        {
                            Id = 57,
                            Content = "Inventore ea ut necessitatibus vel eos ut autem temporibus debitis.",
                            RealEstateId = 17,
                            TimeOfCreation = new DateTime(2020, 9, 17, 15, 7, 41, 987, DateTimeKind.Local).AddTicks(1594),
                            UserId = 1
                        },
                        new
                        {
                            Id = 58,
                            Content = "Hic laudantium nam laborum officia ad nesciunt saepe illum provident.",
                            RealEstateId = 12,
                            TimeOfCreation = new DateTime(2020, 9, 18, 12, 39, 48, 265, DateTimeKind.Local).AddTicks(6672),
                            UserId = 4
                        },
                        new
                        {
                            Id = 59,
                            Content = "Aut optio est et ullam consectetur temporibus quia quisquam.",
                            RealEstateId = 20,
                            TimeOfCreation = new DateTime(2020, 9, 18, 6, 58, 13, 621, DateTimeKind.Local).AddTicks(2033),
                            UserId = 3
                        },
                        new
                        {
                            Id = 60,
                            Content = "Corrupti dolores assumenda dolores.",
                            RealEstateId = 7,
                            TimeOfCreation = new DateTime(2020, 9, 17, 14, 0, 41, 14, DateTimeKind.Local).AddTicks(92),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("RatingUserId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("RatingUserId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 4
                        },
                        new
                        {
                            Id = 2,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 2
                        },
                        new
                        {
                            Id = 3,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 1
                        },
                        new
                        {
                            Id = 4,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 4
                        },
                        new
                        {
                            Id = 5,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 5
                        },
                        new
                        {
                            Id = 6,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 1
                        },
                        new
                        {
                            Id = 7,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 1
                        },
                        new
                        {
                            Id = 8,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 3
                        },
                        new
                        {
                            Id = 9,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 5
                        },
                        new
                        {
                            Id = 10,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 3
                        },
                        new
                        {
                            Id = 11,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 3
                        },
                        new
                        {
                            Id = 12,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 4
                        },
                        new
                        {
                            Id = 13,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 2
                        },
                        new
                        {
                            Id = 14,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 4
                        },
                        new
                        {
                            Id = 15,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 4
                        },
                        new
                        {
                            Id = 16,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 3
                        },
                        new
                        {
                            Id = 17,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 5
                        },
                        new
                        {
                            Id = 18,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 1
                        },
                        new
                        {
                            Id = 19,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 2
                        },
                        new
                        {
                            Id = 20,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 1
                        },
                        new
                        {
                            Id = 21,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 3
                        },
                        new
                        {
                            Id = 22,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 3
                        },
                        new
                        {
                            Id = 23,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 4
                        },
                        new
                        {
                            Id = 24,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 2
                        },
                        new
                        {
                            Id = 25,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 5
                        },
                        new
                        {
                            Id = 26,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 4
                        },
                        new
                        {
                            Id = 27,
                            RatedUserId = 1,
                            RatingUserId = 1,
                            Score = 1
                        },
                        new
                        {
                            Id = 28,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 3
                        },
                        new
                        {
                            Id = 29,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 1
                        },
                        new
                        {
                            Id = 30,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 3
                        },
                        new
                        {
                            Id = 31,
                            RatedUserId = 2,
                            RatingUserId = 2,
                            Score = 4
                        },
                        new
                        {
                            Id = 32,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 1
                        },
                        new
                        {
                            Id = 33,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 3
                        },
                        new
                        {
                            Id = 34,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 2
                        },
                        new
                        {
                            Id = 35,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 2
                        },
                        new
                        {
                            Id = 36,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 1
                        },
                        new
                        {
                            Id = 37,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 5
                        },
                        new
                        {
                            Id = 38,
                            RatedUserId = 4,
                            RatingUserId = 4,
                            Score = 2
                        },
                        new
                        {
                            Id = 39,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 3
                        },
                        new
                        {
                            Id = 40,
                            RatedUserId = 3,
                            RatingUserId = 3,
                            Score = 2
                        });
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.RealEstate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfAdvertCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsRentable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSellable")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Rent")
                        .HasColumnType("money");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("money");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("YearBuilt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RealEstates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "91073 Feest Spurs, West Wilfridville, Senegal",
                            Contact = "Laurine Carroll, $1908 Antone Manors, South Araceli, Sri Lanka",
                            DateOfAdvertCreation = new DateTime(1644, 12, 23, 14, 5, 42, 386, DateTimeKind.Unspecified).AddTicks(4720),
                            Description = "Voluptatem fuga laudantium non ratione.",
                            IsRentable = false,
                            IsSellable = true,
                            Rent = 0m,
                            SellPrice = 1096466m,
                            Title = "laboriosam",
                            Type = 0,
                            UserId = 4,
                            YearBuilt = 1644
                        },
                        new
                        {
                            Id = 2,
                            Address = "930 Sonya Bridge, Feilshire, Philippines",
                            Contact = "Jody Dietrich, $6304 Howell Roads, East Angusshire, Palestinian Territory",
                            DateOfAdvertCreation = new DateTime(1649, 1, 23, 3, 0, 38, 110, DateTimeKind.Unspecified).AddTicks(377),
                            Description = "Velit eaque sed quidem aut doloribus aut.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 4866m,
                            SellPrice = 0m,
                            Title = "quo",
                            Type = 2,
                            UserId = 2,
                            YearBuilt = 1649
                        },
                        new
                        {
                            Id = 3,
                            Address = "62059 Hilpert Brooks, Lake Haylie, Turkmenistan",
                            Contact = "Nico Hauck, $80258 Cole Turnpike, South Dellview, Andorra",
                            DateOfAdvertCreation = new DateTime(1702, 11, 23, 20, 53, 52, 222, DateTimeKind.Unspecified).AddTicks(9110),
                            Description = "Sint consequuntur provident est aliquid deleniti aut voluptatibus vitae.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 9329m,
                            SellPrice = 0m,
                            Title = "sint",
                            Type = 3,
                            UserId = 2,
                            YearBuilt = 1702
                        },
                        new
                        {
                            Id = 4,
                            Address = "6552 Okuneva Haven, New Golden, Canada",
                            Contact = "Verlie Bode, $117 Barton Springs, Scarletttown, French Guiana",
                            DateOfAdvertCreation = new DateTime(1616, 5, 29, 9, 10, 21, 867, DateTimeKind.Unspecified).AddTicks(6542),
                            Description = "Nulla sit qui corporis maiores minima sed.",
                            IsRentable = false,
                            IsSellable = true,
                            Rent = 0m,
                            SellPrice = 301994m,
                            Title = "vero",
                            Type = 0,
                            UserId = 1,
                            YearBuilt = 1616
                        },
                        new
                        {
                            Id = 5,
                            Address = "628 Goodwin Cape, New Dorrismouth, Belarus",
                            Contact = "Wilton Mayert, $955 Hagenes Heights, Port Audra, Germany",
                            DateOfAdvertCreation = new DateTime(1742, 1, 30, 16, 57, 59, 687, DateTimeKind.Unspecified).AddTicks(1157),
                            Description = "Animi necessitatibus pariatur repudiandae a vel voluptatem amet atque excepturi.",
                            IsRentable = false,
                            IsSellable = true,
                            Rent = 0m,
                            SellPrice = 1620100m,
                            Title = "veritatis",
                            Type = 2,
                            UserId = 1,
                            YearBuilt = 1742
                        },
                        new
                        {
                            Id = 6,
                            Address = "57264 Jared Summit, East Elsieville, Yemen",
                            Contact = "Elfrieda Rowe, $0758 Hills Ferry, Marquardtside, Italy",
                            DateOfAdvertCreation = new DateTime(1701, 12, 22, 1, 58, 30, 272, DateTimeKind.Unspecified).AddTicks(5613),
                            Description = "Animi illum id.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 7236m,
                            SellPrice = 0m,
                            Title = "optio",
                            Type = 2,
                            UserId = 2,
                            YearBuilt = 1701
                        },
                        new
                        {
                            Id = 7,
                            Address = "918 Lebsack Highway, Port Myronborough, Georgia",
                            Contact = "Lyla Terry, $5500 Nick Shores, Briaside, Spain",
                            DateOfAdvertCreation = new DateTime(1937, 1, 18, 22, 18, 22, 769, DateTimeKind.Unspecified).AddTicks(174),
                            Description = "Temporibus minima id atque voluptatem repellat quos consequatur facilis tenetur.",
                            IsRentable = false,
                            IsSellable = true,
                            Rent = 0m,
                            SellPrice = 2463133m,
                            Title = "nostrum",
                            Type = 3,
                            UserId = 2,
                            YearBuilt = 1937
                        },
                        new
                        {
                            Id = 8,
                            Address = "2243 Myrtle Square, South Savannahmouth, Saint Barthelemy",
                            Contact = "Oswaldo Rodriguez, $1164 Dante Plaza, Alfhaven, Maldives",
                            DateOfAdvertCreation = new DateTime(1762, 12, 13, 0, 28, 4, 514, DateTimeKind.Unspecified).AddTicks(6217),
                            Description = "Corporis eveniet nostrum ut officia atque blanditiis possimus.",
                            IsRentable = false,
                            IsSellable = true,
                            Rent = 0m,
                            SellPrice = 1504483m,
                            Title = "vel",
                            Type = 3,
                            UserId = 4,
                            YearBuilt = 1762
                        },
                        new
                        {
                            Id = 9,
                            Address = "4179 Hermiston Canyon, North Houstonbury, Republic of Korea",
                            Contact = "Mabel Padberg, $72207 Dominic Brooks, Morissettemouth, Eritrea",
                            DateOfAdvertCreation = new DateTime(1884, 8, 15, 16, 41, 41, 892, DateTimeKind.Unspecified).AddTicks(3384),
                            Description = "Eos dolor necessitatibus omnis.",
                            IsRentable = false,
                            IsSellable = true,
                            Rent = 0m,
                            SellPrice = 646934m,
                            Title = "odio",
                            Type = 2,
                            UserId = 1,
                            YearBuilt = 1884
                        },
                        new
                        {
                            Id = 10,
                            Address = "1538 Hartmann Burgs, Jeffrymouth, Finland",
                            Contact = "Reta Kilback, $888 Johnston Hill, Port Cleta, Bangladesh",
                            DateOfAdvertCreation = new DateTime(1721, 4, 6, 23, 51, 46, 885, DateTimeKind.Unspecified).AddTicks(6356),
                            Description = "Doloribus vitae quaerat.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 6150m,
                            SellPrice = 0m,
                            Title = "non",
                            Type = 3,
                            UserId = 4,
                            YearBuilt = 1721
                        },
                        new
                        {
                            Id = 11,
                            Address = "65136 Evangeline Station, Friesentown, Palau",
                            Contact = "Jocelyn Monahan, $0460 Moen Keys, East Jaimestad, Burkina Faso",
                            DateOfAdvertCreation = new DateTime(1606, 11, 8, 22, 40, 36, 380, DateTimeKind.Unspecified).AddTicks(2113),
                            Description = "Modi reiciendis praesentium aut incidunt cumque placeat.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 7981m,
                            SellPrice = 0m,
                            Title = "facilis",
                            Type = 0,
                            UserId = 3,
                            YearBuilt = 1606
                        },
                        new
                        {
                            Id = 12,
                            Address = "75762 Cormier Bridge, Graysonchester, Hong Kong",
                            Contact = "Cristopher Marks, $954 Ena Ports, Shieldstown, Afghanistan",
                            DateOfAdvertCreation = new DateTime(1939, 11, 16, 13, 27, 43, 678, DateTimeKind.Unspecified).AddTicks(3721),
                            Description = "Et provident nobis mollitia consequatur et.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 10467m,
                            SellPrice = 0m,
                            Title = "eius",
                            Type = 2,
                            UserId = 3,
                            YearBuilt = 1939
                        },
                        new
                        {
                            Id = 13,
                            Address = "0486 Wiegand Corners, West Meggie, Japan",
                            Contact = "Charlie Jones, $00590 King Ways, Port Leonardburgh, Falkland Islands (Malvinas)",
                            DateOfAdvertCreation = new DateTime(1842, 3, 22, 18, 22, 47, 197, DateTimeKind.Unspecified).AddTicks(7649),
                            Description = "Est odio sunt rerum nihil voluptatem fugit voluptas accusantium aliquam.",
                            IsRentable = false,
                            IsSellable = true,
                            Rent = 0m,
                            SellPrice = 2967411m,
                            Title = "earum",
                            Type = 3,
                            UserId = 1,
                            YearBuilt = 1842
                        },
                        new
                        {
                            Id = 14,
                            Address = "305 Loren Orchard, Emmaleemouth, Sierra Leone",
                            Contact = "Travis Walsh, $300 Nolan Island, East Frances, Eritrea",
                            DateOfAdvertCreation = new DateTime(1660, 3, 24, 18, 17, 44, 236, DateTimeKind.Unspecified).AddTicks(9860),
                            Description = "Deleniti occaecati ullam illum aut accusamus blanditiis voluptas.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 5590m,
                            SellPrice = 0m,
                            Title = "nostrum",
                            Type = 2,
                            UserId = 2,
                            YearBuilt = 1660
                        },
                        new
                        {
                            Id = 15,
                            Address = "919 Alexandria Camp, Sawaynfurt, Uganda",
                            Contact = "Marshall Kunze, $114 Bianka Fork, Port Judebury, Guatemala",
                            DateOfAdvertCreation = new DateTime(1775, 1, 11, 4, 58, 47, 660, DateTimeKind.Unspecified).AddTicks(8044),
                            Description = "Et qui laboriosam numquam hic id nemo.",
                            IsRentable = false,
                            IsSellable = true,
                            Rent = 0m,
                            SellPrice = 1449966m,
                            Title = "deserunt",
                            Type = 2,
                            UserId = 1,
                            YearBuilt = 1775
                        },
                        new
                        {
                            Id = 16,
                            Address = "8172 Greenholt Crescent, Alannaville, Norfolk Island",
                            Contact = "Brandi Pfannerstill, $60031 Purdy Well, Lake Kiel, Equatorial Guinea",
                            DateOfAdvertCreation = new DateTime(1846, 5, 16, 13, 55, 26, 780, DateTimeKind.Unspecified).AddTicks(9997),
                            Description = "Voluptas dicta mollitia.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 6655m,
                            SellPrice = 0m,
                            Title = "dolore",
                            Type = 1,
                            UserId = 2,
                            YearBuilt = 1846
                        },
                        new
                        {
                            Id = 17,
                            Address = "7069 Hansen Rapid, South Anjalichester, Czech Republic",
                            Contact = "Kellen Vandervort, $988 Maddison Locks, Ellisburgh, Ghana",
                            DateOfAdvertCreation = new DateTime(1740, 6, 8, 21, 48, 17, 663, DateTimeKind.Unspecified).AddTicks(2573),
                            Description = "Optio placeat dolorem incidunt at.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 7356m,
                            SellPrice = 0m,
                            Title = "veritatis",
                            Type = 2,
                            UserId = 1,
                            YearBuilt = 1740
                        },
                        new
                        {
                            Id = 18,
                            Address = "24341 Vilma Villages, Ferryton, Croatia",
                            Contact = "Nicholas Padberg, $78078 Grady Corners, Annettaton, Ukraine",
                            DateOfAdvertCreation = new DateTime(1732, 1, 13, 11, 1, 40, 240, DateTimeKind.Unspecified).AddTicks(7676),
                            Description = "Minima natus sunt facilis.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 9966m,
                            SellPrice = 0m,
                            Title = "aperiam",
                            Type = 0,
                            UserId = 2,
                            YearBuilt = 1732
                        },
                        new
                        {
                            Id = 19,
                            Address = "07936 Carlee Ford, Ziemeshire, Svalbard & Jan Mayen Islands",
                            Contact = "Wade Hackett, $5238 Marisa Lakes, Harveyhaven, Niue",
                            DateOfAdvertCreation = new DateTime(1769, 6, 30, 18, 0, 26, 696, DateTimeKind.Unspecified).AddTicks(6466),
                            Description = "Est ea quis delectus delectus autem quos id occaecati repellendus.",
                            IsRentable = false,
                            IsSellable = true,
                            Rent = 0m,
                            SellPrice = 2799231m,
                            Title = "ex",
                            Type = 3,
                            UserId = 2,
                            YearBuilt = 1769
                        },
                        new
                        {
                            Id = 20,
                            Address = "9195 Harris Roads, Rauview, Holy See (Vatican City State)",
                            Contact = "Savanna Brakus, $532 Gerhard Island, Port Rahul, Myanmar",
                            DateOfAdvertCreation = new DateTime(1858, 3, 30, 10, 57, 49, 18, DateTimeKind.Unspecified).AddTicks(3645),
                            Description = "Sint natus delectus alias eveniet molestias aspernatur eligendi illum.",
                            IsRentable = true,
                            IsSellable = false,
                            Rent = 8703m,
                            SellPrice = 0m,
                            Title = "ut",
                            Type = 0,
                            UserId = 4,
                            YearBuilt = 1858
                        });
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68e01f8c-ba04-416e-9e53-dab4c5f2e50d",
                            Email = "bamse@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "BAMSE@GMAIL.COM",
                            NormalizedUserName = "BAMSE@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAR00VgEXuNcTRL9aekKB86ar4F2D+pRmar9AGvUw/Fnxxe531NIpGwsPAi56bxqTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DRGRSWDQ5C5MZZBZQUWDGHQRW66QI5D6",
                            TwoFactorEnabled = false,
                            UserName = "bamse@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3d90eb5-90d9-4f69-97bd-057f32692f84",
                            Email = "skalman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "SKALMAN@GMAIL.COM",
                            NormalizedUserName = "SKALMAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEOcqQ00ZZaNxwRK5lJGV1RPtl7rGeeMIlietoHd62yeavAR3PsuAGrBI8TWClg/qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "P7HU2IDVNJQEYMGXCN55NQHELVS3TECN",
                            TwoFactorEnabled = false,
                            UserName = "skalman@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c6ba646-058a-4876-ab51-e681e26f74d3",
                            Email = "alfons@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ALFONS@GMAIL.COM",
                            NormalizedUserName = "ALFONS@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGFDh/g9WmY5IWx5cxkE44yyV5a6ucoFfhUcoe8DmVNIP5Ror9j1dYRxA2zKQMXG0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "K4GFE2ZZLA7BRDI3VWC2M2N2ILHKE6X3",
                            TwoFactorEnabled = false,
                            UserName = "alfons@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a638d86b-eac1-4338-90c3-a0f9b42ac60f",
                            Email = "laban@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "LABAN@GMAIL.COMm",
                            NormalizedUserName = "LABAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMD595Y3JYWe+nH1AIQhsN6Ft74vry91PDj0/7Mt4ZZoFim856jomEAfq92mo8LHuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "NW6F2HLUH24CNHBFUNW54LVDZVNG3ALB",
                            TwoFactorEnabled = false,
                            UserName = "laban@gmail.com"
                        });
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.Comment", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("GroupAssignmentTeamBlue.Model.RealEstate", "RealEstateInQuestion")
                        .WithMany("Comments")
                        .HasForeignKey("RealEstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupAssignmentTeamBlue.Model.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.Rating", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.User", "RatedUser")
                        .WithMany("RatingsRecieved")
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GroupAssignmentTeamBlue.Model.User", "RatingUser")
                        .WithMany("RatingsMade")
                        .HasForeignKey("RatingUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupAssignmentTeamBlue.Model.RealEstate", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.User", "User")
                        .WithMany("RealEstates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GroupAssignmentTeamBlue.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("GroupAssignmentTeamBlue.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
